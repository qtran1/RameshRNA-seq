superpose.eb <- function (x, y, ebl, ebu = ebl, length = 0.08, ...)
arrows(x, y + ebu, x, y - ebl, angle = 90, code = 3,
length = length, ...)
ymax <- max(summary.dark$Increase + summary.dark$SE)
plot <- barplot(summary.dark$Increase,
beside=T, col=summary.dark$Treatment, las=1,
ylab="Increase in VO2 (mL/h/animal)",
names.arg=summary.dark$Treatment,
ylim=c(0,ymax))
superpose.eb(plot, summary.dark$Increase, summary.dark$SE)
```
```{r cold-increase-barplot-pct, fig.cap="Percent increase in VO2 in 18C"}
ymax <- max(summary.dark.pct$Increase + summary.dark.pct$SE)
plot <- barplot(summary.dark.pct$Increase,
beside=T, col=summary.dark.pct$Treatment, las=1,
ylab="Percent Increase in VO2",
names.arg=summary.dark.pct$Treatment,
ylim=c(0,ymax))
superpose.eb(plot, summary.dark.pct$Increase, summary.dark.pct$SE)
```
# Statistics
For absolute increase, the data can be assumed to be normal via a Shapiro-Wilk test (p>)
# Session Information
```{r session-info, echo=FALSE, message=FALSE}
sessionInfo()
```
summary.data
summary.dark
library(car)
leveneTest(VO2~Treatment, subset(summary.dark, Treatment != 'NCD + Vehicle')
)
leveneTest(VO2~Treatment, subset(summary.dark, Treatment != 'NCD + Vehicle'))
leveneTest(VO2~Treatment, subset(merged.dark.data, Treatment != 'NCD + Vehicle'))
leveneTest(VO2~Treatment, subset(merged.dark.data, Treatment != 'NCD + Vehicle'))$"Pr(>F)"
leveneTest(VO2~Treatment, subset(merged.dark.data, Treatment != 'NCD + Vehicle'))$"Pr(>F)"[1]
?t.test
t.test(VO2.x, VO2.y, data=merged.data.dark)
t.test(VO2.x, VO2.y, data=merged.data.dark)
merged.data.dark
t.test(VO2.x, VO2.y, data=merged.dark.data)
merged.dark.data
t.test(merged.dark.data$VO2.x, merged.dark.data$VO2.y)
View(merged.dark.data)
View(merged.dark.data)
library(xlsx)
mri_data_file <- '2015-08-10 MRI Data.xlsx'
mri_data <- read.xlsx2(mri_data_file, sheetName="ExtractedScans")
mri_data$Treatment <- relevel(mri_data$Treatment, ref='HFD + Vehicle')
mri_data$Lean <- as.numeric(as.character(mri_data$Lean))
mri_data$Fat <- as.numeric(as.character(mri_data$Fat))
mri_data$Weight <- as.numeric(as.character(mri_data$Weight))
clams_data_file <- '2015-08-24 Naryanan, MC4R, mTSC/oxymax_data.csv'
all.data <- read.csv(clams_data_file)
all.data$Subject <- as.factor(all.data$Subject)
remove.intervals <- 20
remove.mice <- c()
all.data.clean <- subset(all.data, Interval>remove.intervals)
all.data.clean <- subset(all.data.clean, Event.Log=='')
subset(all.data.clean, VO2<100)
library(dplyr)
merged_data <-
all.data.clean %>%
inner_join(mri_data, by=c('Subject'='Label')) %>%
select(Subject,Interval,Date.Time, Light.Dark,Volume.O2, RER,Heat,Feed.Weight.1,
X.Ambulatory,Y.Ambulatory,
Treatment, Fat, Lean) %>%
mutate(Total.Weight = Lean + Fat,
VO2 = Volume.O2 * Total.Weight/1000,
Percent.Fat.Mass = Fat/Total.Weight*100,
Total.Activity = X.Ambulatory)
merged_data$Time <- sapply(strsplit(as.character(merged_data$Date.Time), " "), "[[", 2)
library(lubridate)
merged_data$Time <- as.numeric(hms(merged_data$Time))
merged_data$Time.Interval <- cut(merged_data$Time, 48)
merged_data$Date.Time <- mdy_hms(as.character(merged_data$Date.Time))
subset(merged_data, VO2<100)
subset(merged_data, VO2<100)$Interval
historgram(subset(merged_data, VO2<100)$Interval)
histogram(subset(merged_data, VO2<100)$Interval)
hist(subset(merged_data, VO2<100)$Interval)
---
title: "B-LGND and HFD CLAMS at 18C"
author: "Dave Bridges, Innocence Harvey and Ramesh Narayanan"
date: "August 18, 2015"
output:
pdf_document:
fig_caption: yes
keep_tex: yes
html_document:
keep_md: yes
---
```{r global_options, include=FALSE}
library(knitr)
opts_chunk$set(fig.path='figures/',
echo=FALSE, warning=FALSE, message=FALSE,dev=c('png','pdf'))
options(scipen=115,digits =4)
```
```{r data-entry}
library(xlsx)
mri_data_file <- '2015-08-10 MRI Data.xlsx'
mri_data <- read.xlsx2(mri_data_file, sheetName="ExtractedScans")
mri_data$Treatment <- relevel(mri_data$Treatment, ref='HFD + Vehicle')
mri_data$Lean <- as.numeric(as.character(mri_data$Lean))
mri_data$Fat <- as.numeric(as.character(mri_data$Fat))
mri_data$Weight <- as.numeric(as.character(mri_data$Weight))
clams_data_file <- '2015-08-24 Naryanan, MC4R, mTSC/oxymax_data.csv'
all.data <- read.csv(clams_data_file)
all.data$Subject <- as.factor(all.data$Subject)
remove.intervals <- 20
remove.mice <- c()
all.data.clean <- subset(all.data, Interval>remove.intervals)
all.data.clean <- subset(all.data.clean, Event.Log=='')
#remove first run's extra data
#remove bad data, this was an injection that ran through two intervals
library(dplyr)
merged_data <-
all.data.clean %>%
inner_join(mri_data, by=c('Subject'='Label')) %>%
select(Subject,Interval,Date.Time, Light.Dark,Volume.O2, RER,Heat,Feed.Weight.1,
X.Ambulatory,Y.Ambulatory,
Treatment, Fat, Lean) %>%
mutate(Total.Weight = Lean + Fat,
VO2 = Volume.O2 * Total.Weight/1000,
Percent.Fat.Mass = Fat/Total.Weight*100,
Total.Activity = X.Ambulatory)
merged_data$Time <- sapply(strsplit(as.character(merged_data$Date.Time), " "), "[[", 2)
library(lubridate)
merged_data$Time <- as.numeric(hms(merged_data$Time))
merged_data$Time.Interval <- cut(merged_data$Time, 48)
merged_data$Date.Time <- mdy_hms(as.character(merged_data$Date.Time))
```
This experiment used the data only from mice placed at 18C.  They were shifted to 18C at the start of the experiment, after having been acclimitized in the CLAMS at the normal temperature (25C) for 3 days.
The input files were `r mri_data_file` for the echoMRI data and `r clams_data_file` for the CLAMS data.  These data can be found in `r getwd()`.  This script was most recently updated on `r date()` and includes the following number of animals:
```{r summary-table, results='asis'}
mri_table <-
mri_data %>%
distinct(Label) %>%
group_by(Treatment) %>%
summarise(Males = length(Treatment))
summary_table <-
merged_data %>%
distinct(Subject) %>%
group_by(Treatment) %>%
summarise(Males = length(Treatment))
kable(summary_table)
```
This study was done after 8 weeks of diet/drug treatment, using male mice only.
```{r analysis}
se <- function(x) sd(x)/sqrt(length(x))
#calculate time for one interval
interval_time <- as.numeric( difftime(merged_data$Date.Time[2], merged_data$Date.Time[1], units="hours"))
animal.time.course <-
merged_data %>%
group_by(Treatment,Interval, Time, Light.Dark) %>%
summarize(VO2 = mean(VO2),
RER = mean(RER),
Total.Activity = mean(Total.Activity),
Lean.Mass = mean(Lean),
Fat.Mass = mean(Fat),
Percent.Fat.Mass = mean(Percent.Fat.Mass),
Body.Weight = mean(Total.Weight)) %>%
mutate(Time.Elapsed = Interval*interval_time)
animal.summary <-
merged_data %>%
group_by(Subject,Treatment,Light.Dark) %>%
summarize(VO2 = mean(VO2),
RER = mean(RER),
Total.Activity = mean(Total.Activity),
Lean.Mass = mean(Lean),
Fat.Mass = mean(Fat),
Percent.Fat.Mass = mean(Percent.Fat.Mass),
Body.Weight = mean(Total.Weight))
write.csv(animal.summary, "Animal Summary Data.csv")
grouped.summary <-
animal.summary %>%
group_by(Treatment,Light.Dark) %>%
summarize(VO2 = mean(VO2),
RER = mean(RER),
Total.Activity = mean(Total.Activity),
Lean.Mass = mean(Lean.Mass),
Fat.Mass = mean(Fat.Mass),
Percent.Fat.Mass = mean(Percent.Fat.Mass),
Body.Weight = mean(Body.Weight)) %>%
rename(Light.Dark=Light.Dark)
grouped.summary.se <-
animal.summary %>%
group_by(Treatment,Light.Dark) %>%
summarize(VO2 = se(VO2),
RER = se(RER),
Total.Activity = se(Total.Activity),
Lean.Mass = se(Lean.Mass),
Fat.Mass = se(Fat.Mass),
Percent.Fat.Mass = se(Percent.Fat.Mass),
Body.Weight = se(Body.Weight)) %>%
rename(Light.Dark=Light.Dark)
```
# Resting Metabolic Rate
The proxy for energy consumption is the volume of oxygen consumed.  This is best presented in proportion to the amount of lean body mass, since fat mass does not appreciably consume oxygen.  Resting metabolic rate should be high in the evening (when mice are active) and low during the day.  The interpretation of changes in VO2 also requires looking at the levels of physical activity, since more physically active animals will consume more oxygen.
The VO2 levels were first merged to average over light and dark cycles, removing the first `r remove.intervals` measurements.  To analyse these data we performed an ANCOVA analysis using lean body mass as the primary covariate, and removing the NCD animals.  This analysis presumes that the effect of lean body mass on VO2 is the same for each group.
```{r VO2-by-lean, fig.cap="Effects of Treatment on VO2.  The lines represent the results of an ANCOVA analysis accounting for the effects of lean mass."}
superpose.eb <- function (x, y, ebl, ebu = ebl, length = 0.08, ...)
arrows(x, y + ebu, x, y - ebl, angle = 90, code = 3,
length = length, ...)
par(mfrow=c(1,2))
plot.data <- subset(animal.summary,Light.Dark=='Dark')
with(plot.data, plot(Lean.Mass, VO2,pch=19, las=1, ylab="VO2 (mL/h)", xlab="Lean Mass (g)", main='Dark', col=Treatment, ylim=c(min(animal.summary$VO2), max(animal.summary$VO2))))
legend("topright", levels(merged_data$Treatment), pch=19, col=palette()[1:3], lty=1, bty='n')
#calculate best fit lines
dark.none.lm <- lm(VO2~Lean.Mass+Treatment, data=plot.data )
dark.none.hfd.aov <- aov(VO2~Lean.Mass+Treatment, data=plot.data )
#draw lines
abline(a=coefficients(dark.none.lm)['(Intercept)'],
b=coefficients(dark.none.lm)['Lean.Mass'], col=palette()[1])
abline(a=coefficients(dark.none.lm)['(Intercept)']+coefficients(dark.none.lm)['TreatmentHFD + B-LGND'],
b=coefficients(dark.none.lm)['Lean.Mass'], col=palette()[2])
abline(a=coefficients(dark.none.lm)['(Intercept)']+coefficients(dark.none.lm)['TreatmentNCD + Vehicle'],
b=coefficients(dark.none.lm)['Lean.Mass'], col=palette()[3])
plot.data <- subset(animal.summary,Light.Dark=='Light')
with(plot.data, plot(Lean.Mass, VO2, pch=19, las=1, ylab="VO2 (mL/h)", xlab="Lean Mass (g)", main='Light', col=Treatment, ylim=c(min(animal.summary$VO2), max(animal.summary$VO2))))
legend("bottomright", levels(merged_data$Treatment), pch=19, col=palette()[1:3], lty=1, bty='n')
#calculate best fit lines
light.none.lm <- lm(VO2~Lean.Mass+Treatment, data=plot.data )
light.none.hfd.aov <- aov(VO2~Lean.Mass+Treatment, data=plot.data )
#draw lines
abline(a=coefficients(light.none.lm)['(Intercept)'],
b=coefficients(light.none.lm)['Lean.Mass'], col=palette()[1])
abline(a=coefficients(light.none.lm)['(Intercept)']+coefficients(dark.none.lm)['TreatmentHFD + B-LGND'],
b=coefficients(light.none.lm)['Lean.Mass'], col=palette()[2])
abline(a=coefficients(light.none.lm)['(Intercept)']+coefficients(dark.none.lm)['TreatmentNCD + Vehicle'],
b=coefficients(light.none.lm)['Lean.Mass'], col=palette()[3])
```
```{r vo2-diagnostic-plots, fig.cap="Diagnostic model plots for effects of drug treatment on VO2.  This analysis only includes HFD fed animals."}
library(lme4)
vo2.lme <- lmer(VO2 ~ Light.Dark + Lean + Treatment + (1|Subject), data=subset(merged_data, Treatment!="NCD + Vehicle"), REML=F)
vo2.lme.null <- lmer(VO2 ~ Light.Dark + Lean + (1|Subject), data=subset(merged_data, Treatment!="NCD + Vehicle"), REML=F)
library(influence.ME)
par(mfrow=c(1,3))
infl <- influence(vo2.lme, group='Subject')
barplot(cooks.distance(infl), main="Cook's Distance",
beside=T, col='grey',las=2, names.arg=rownames(cooks.distance(infl)))
plot(density(residuals(vo2.lme)), main="Residuals")
plot(fitted(vo2.lme), residuals(vo2.lme), xlab="Predicted VO2", ylab="Residuals", main="Residuals vs Predicted")
```
We first checked whether normality was maintained in the residuals from the ANCOVA.  These results are summarized below:
```{r vo2-ancova-summary, results='asis'}
#omnibus ANOVA
vo2.aov <-  aov(VO2~Lean.Mass+Light.Dark + Treatment, data=subset(animal.summary, Treatment!="NCD + Vehicle"))
vo2.lm <-  lm(VO2~Lean.Mass+Light.Dark + Treatment, data=subset(animal.summary, Treatment!="NCD + Vehicle"))
kable(summary(vo2.aov)[[1]], caption='ANCOVA Analysis for Effect of Diet on VO2.  This analysis includes HFD animals only', digits=8)
library(car)
```
```{r vo2-time-course, fig.cap="Oxygen consumption over time."}
with(subset(animal.time.course, Treatment==levels(merged_data$Treatment)[1]), plot(Time.Elapsed,VO2, type="l", ylab="VO2 (mL/h)", xlab="Time (hours)", las=1, ylim=c(min(animal.time.course$VO2), max(animal.time.course$VO2))))
with(subset(animal.time.course, Treatment==levels(merged_data$Treatment)[2]), lines(Time.Elapsed,VO2, col=palette()[2]))
with(subset(animal.time.course, Treatment==levels(merged_data$Treatment)[3]), lines(Time.Elapsed,VO2, col=palette()[3]))
legend("topleft", levels(animal.time.course$Treatment), bty="n", lty=1, col=palette()[1:3])
```
The residuals of this model were normally distributed (p=`r shapiro.test(residuals(vo2.aov))$p.value`) via a Shapiro-Wilk Test.
Alternatively we used a mixed linear model, with non-interacting covariates for the Light cycle, the lean mass and the treatment  A Chi-squared test comparing a model with or without the Treatment term yielded a p-value of `r  anova(vo2.lme,vo2.lme.null)$"Pr(>Chisq)"[2]` for the mice.  The residuals of this mixed linear model were **not normally distributed** (`r shapiro.test(residuals(vo2.lme))$p.value` via Shapiro-Wilk Test).  This analysis excluded the chow fed animals, and only compares HFD vehicle to HFD drug.
```{r vo2-barplot, fig.cap="The oxygen consumption rate summarized by light/dark cycle."}
library(tidyr)
VO2.dataset <- grouped.summary %>%
group_by(Treatment, Light.Dark) %>%
select(Light.Dark,Treatment,VO2) %>%
spread(Light.Dark, VO2)
VO2.dataset.se <- grouped.summary.se %>%
group_by(Treatment, Light.Dark) %>%
select(Light.Dark,Treatment,VO2) %>%
spread(Light.Dark, VO2)
plot <- barplot(as.matrix(VO2.dataset[2:3]),
beside=T, col=VO2.dataset$Treatment, las=1,
ylab="VO2 (mL/h/animal)",
ylim=c(0,max(VO2.dataset[2:3]) + max(VO2.dataset.se[2:3])))
superpose.eb(plot, as.matrix(VO2.dataset[2:3]), as.matrix(VO2.dataset.se[2:3]))
legend("topright", levels(VO2.dataset$Treatment), bty="n", fill=palette()[1:3])
```
\newpage
# Body Weights and Composition
```{r body-composition, fig.cap="Body consumption summarized barplots."}
par(mfrow=c(2,2))
library(tidyr)
bw.dataset <- subset(grouped.summary, Light.Dark=='Dark') %>%
group_by(Treatment)
bw.dataset.se <- subset(grouped.summary.se, Light.Dark=='Dark') %>%
group_by(Treatment)
ymax = max(bw.dataset$Body.Weight, na.rm=T) + max(bw.dataset.se$Body.Weight, na.rm=T)
plot <- barplot(bw.dataset$Body.Weight,
beside=T, col=palette()[1:3], las=1,
ylab="Weight (g)", ylim=c(0,ymax),
names.arg=bw.dataset$Treatment,
cex.names=0.6)
superpose.eb(plot, bw.dataset$Body.Weight, bw.dataset.se$Body.Weight)
ymax = max(bw.dataset$Lean.Mass, na.rm=T) + max(bw.dataset.se$Lean.Mass, na.rm=T)
plot <- barplot(bw.dataset$Lean.Mass,
beside=T, col=palette()[1:3], las=1,
ylab="Lean Mass (g)", ylim=c(0,ymax),
names.arg=bw.dataset$Treatment,
cex.names=0.6)
superpose.eb(plot, bw.dataset$Lean.Mass, bw.dataset.se$Lean.Mass)
ymax = max(bw.dataset$Fat.Mass, na.rm=T) + max(bw.dataset.se$Fat.Mass, na.rm=T)
plot <- barplot(bw.dataset$Fat.Mass,
beside=T, col=palette()[1:3], las=1,
ylab="Fat Mass (g)", ylim=c(0,ymax),
names.arg=bw.dataset$Treatment,
cex.names=0.6)
superpose.eb(plot, bw.dataset$Fat.Mass, bw.dataset.se$Fat.Mass)
ymax = max(bw.dataset$Percent.Fat.Mass, na.rm=T) + max(bw.dataset.se$Percent.Fat.Mass, na.rm=T)
plot <- barplot(bw.dataset$Percent.Fat.Mass,
beside=T, col=palette()[1:3], las=1,
ylab="Percent Fat Mass", ylim=c(0,ymax),
names.arg=bw.dataset$Treatment,
cex.names=0.6)
superpose.eb(plot, bw.dataset$Percent.Fat.Mass, bw.dataset.se$Percent.Fat.Mass)
```
```{r body-weight-statistics}
comp.statistics <- subset(animal.summary, Light.Dark=='Dark'&Treatment!='NCD + Vehicle') %>%
select(Body.Weight, Lean.Mass, Fat.Mass, Percent.Fat.Mass)
statistics.summary <- data.frame()
#for body weight
statistics.summary['Body Weight','Shapiro'] <- min(
shapiro.test(subset(comp.statistics, Treatment=="HFD + Vehicle")$Body.Weight)$p.value,
shapiro.test(subset(comp.statistics, Treatment=="HFD + B-LGND")$Body.Weight)$p.value)
statistics.summary['Body Weight', 'Levene'] <- leveneTest(Body.Weight~Treatment, data=comp.statistics)$"Pr(>F)"[1]
statistics.summary['Body Weight', 'Wilcox'] <- wilcox.test(Body.Weight~Treatment, data=comp.statistics)$p.value
statistics.summary['Body Weight', 'Welch'] <- t.test(Body.Weight~Treatment, data=comp.statistics, var.equal=F)$p.value
statistics.summary['Body Weight', 'Student'] <- t.test(Body.Weight~Treatment, data=comp.statistics, var.equal=T)$p.value
#for fat mass
statistics.summary['Fat Mass','Shapiro'] <- min(
shapiro.test(subset(comp.statistics, Treatment=="HFD + Vehicle")$Fat.Mass)$p.value,
shapiro.test(subset(comp.statistics, Treatment=="HFD + B-LGND")$Fat.Mass)$p.value)
statistics.summary['Fat Mass', 'Levene'] <- leveneTest(Fat.Mass~Treatment, data=comp.statistics)$"Pr(>F)"[1]
statistics.summary['Fat Mass', 'Wilcox'] <- wilcox.test(Fat.Mass~Treatment, data=comp.statistics)$p.value
statistics.summary['Fat Mass', 'Welch'] <- t.test(Fat.Mass~Treatment, data=comp.statistics, var.equal=F)$p.value
statistics.summary['Fat Mass', 'Student'] <- t.test(Fat.Mass~Treatment, data=comp.statistics, var.equal=T)$p.value
#for percent fat mass
statistics.summary['Percent Fat Mass','Shapiro'] <- min(
shapiro.test(subset(comp.statistics, Treatment=="HFD + Vehicle")$Percent.Fat.Mass)$p.value,
shapiro.test(subset(comp.statistics, Treatment=="HFD + B-LGND")$Percent.Fat.Mass)$p.value)
statistics.summary['Percent Fat Mass', 'Levene'] <- leveneTest(Percent.Fat.Mass~Treatment, data=comp.statistics)$"Pr(>F)"[1]
statistics.summary['Percent Fat Mass', 'Wilcox'] <- wilcox.test(Percent.Fat.Mass~Treatment, data=comp.statistics)$p.value
statistics.summary['Percent Fat Mass', 'Welch'] <- t.test(Percent.Fat.Mass~Treatment, data=comp.statistics, var.equal=F)$p.value
statistics.summary['Percent Fat Mass', 'Student'] <- t.test(Percent.Fat.Mass~Treatment, data=comp.statistics, var.equal=T)$p.value
#for lean mass
statistics.summary['Lean Mass','Shapiro'] <- min(
shapiro.test(subset(comp.statistics, Treatment=="HFD + Vehicle")$Lean.Mass)$p.value,
shapiro.test(subset(comp.statistics, Treatment=="HFD + B-LGND")$Lean.Mass)$p.value)
statistics.summary['Lean Mass', 'Levene'] <- leveneTest(Lean.Mass~Treatment, data=comp.statistics)$"Pr(>F)"[1]
statistics.summary['Lean Mass', 'Wilcox'] <- wilcox.test(Lean.Mass~Treatment, data=comp.statistics)$p.value
statistics.summary['Lean Mass', 'Welch'] <- t.test(Lean.Mass~Treatment, data=comp.statistics, var.equal=F)$p.value
statistics.summary['Lean Mass', 'Student'] <- t.test(Lean.Mass~Treatment, data=comp.statistics, var.equal=T)$p.value
kable(statistics.summary, caption="Statistical Tests for Body Composition, HFD Only", digits=7)
```
\newpage
# Respiratory Exchange Rate
The respiratory exchange ratio is an indicator of substrate preference.  A high RER indicates preferential utilization of carbohydrates for energy, while a low RER indicates preferential use of lipids.  The normal range of these values are 0.7 (nearly exclusivley lipid) to 1.0 (nearly exclusively carbohydrate).  Lipid utilization (low RER) is increased during sleep (day cycle for mice).
```{r rer-barplot, fig.cap="The respiratory exchange ratio summarized by light/dark cycle."}
rer.dataset <- grouped.summary %>%
group_by(Treatment, Light.Dark) %>%
select(Light.Dark,Treatment,RER) %>%
spread(Light.Dark, RER)
rer.dataset.se <- grouped.summary.se %>%
group_by(Treatment, Light.Dark) %>%
select(Light.Dark,Treatment,RER) %>%
spread(Light.Dark, RER)
plot <- barplot(as.matrix(rer.dataset[2:3]),
beside=T, col=rer.dataset$Treatment, las=1,
ylab="Respiratory Exchange Ratio", ylim=c(0.7,1),
main="RER",xpd=FALSE)
axis(side=1,at=plot, labels=FALSE, tick=FALSE)
superpose.eb(plot, as.matrix(rer.dataset[2:3]), as.matrix(rer.dataset.se[2:3]))
legend("topright", levels(rer.dataset$Treatment), bty="n", fill=palette()[1:3])
```
```{r rer-time-course, fig.cap="The respiratory exchange ratio over time."}
with(subset(animal.time.course, Treatment==levels(merged_data$Treatment)[1]), plot(Time.Elapsed,RER, type="l", xlab="Time (h)", las=1, ylim=c(0.7,1)))
with(subset(animal.time.course, Treatment==levels(merged_data$Treatment)[2]), lines(Time.Elapsed,RER, col=palette()[2]))
with(subset(animal.time.course, Treatment==levels(merged_data$Treatment)[3]), lines(Time.Elapsed,RER, col=palette()[3]))
legend("bottomright", levels(rer.dataset$Treatment), bty="n", lty=1, col=palette()[1:3])
```
```{r rer-statistics-untreated, fig.cap="Diagnostic model plots for mixed linear model analysis of RER."}
rer.lme <- lmer(RER~Light.Dark + Treatment + (1|Subject), data=subset(merged_data, Treatment!="NCD + Vehicle"), REML=F)
rer.lme.null <- lmer(RER~Light.Dark + (1|Subject), data=subset(merged_data, Treatment!="NCD + Vehicle"), REML=F)
par(mfrow=c(1,3))
infl <- influence(rer.lme, group='Subject')
barplot(cooks.distance(infl), main="Cook's Distance",
beside=T, col='grey',las=2, names.arg=rownames(cooks.distance(infl)))
plot(density(residuals(rer.lme)), main="Residuals")
plot(fitted(rer.lme), residuals(rer.lme), xlab="Predicted RER", ylab="Residuals", main="Residuals vs Predicted")
```
We used a mixed linear model, with non-interacting covariates for the Light cycle and the treatment.  A Chi-squared test comparing a model with or without the treatment term yielded a p-value of `r anova(rer.lme,rer.lme.null)$"Pr(>Chisq)"[2]` for the mice.  This only is comparing the differnce between HFD and HFD + Drug mice.
\newpage
# Activity Data
Physical activity is determined via the number of beam brakes in the X or Y direction (not vertically).  These numbers are high when the mice are awake (dark cycle) and low during the light cycle.  The beam breaks are converted into ambulatory counts based on consecutive breaks of beams, indicating movement.  These counts data are not normally distributed and as such are typically analysed with generalized linear models.
```{r activity, fig.cap="Activity counts summarized by light cycle and treatment group."}
activity.dataset <- grouped.summary %>%
group_by(Treatment, Light.Dark) %>%
select(Light.Dark,Treatment,Total.Activity) %>%
spread(Light.Dark, Total.Activity)
activity.dataset.se <- grouped.summary.se %>%
group_by(Treatment, Light.Dark) %>%
select(Light.Dark,Treatment,Total.Activity) %>%
spread(Light.Dark, Total.Activity)
ymax <- max(as.matrix(activity.dataset[2:3])) + max(as.matrix(activity.dataset.se[2:3]))
plot <- barplot(as.matrix(activity.dataset[2:3]),
beside=T, col=activity.dataset$Treatment, las=1,
ylab="Ambulatory Movement", ylim=c(0,ymax),
main="Activity")
superpose.eb(plot, as.matrix(activity.dataset[2:3]), as.matrix(activity.dataset.se[2:3]))
legend("topright", levels(activity.dataset$Treatment), bty="n", fill=palette()[1:3])
```
```{r activity-statistics, fig.cap="Model diagnostic plots for generalized linear models of physical activity."}
activity.lme <- glmer(Total.Activity~Light.Dark + Treatment + (1|Subject), data=subset(merged_data, Treatment!="NCD + Vehicle"), family='poisson')
activity.lme.null <- glmer(Total.Activity~Light.Dark + (1|Subject), data=subset(merged_data, Treatment!="NCD + Vehicle"), family='poisson')
par(mfrow=c(1,3))
infl <- influence(activity.lme, group='Subject')
barplot(cooks.distance(infl), main="Cook's Distance",
beside=T, col='grey',las=2, names.arg=rownames(cooks.distance(infl)))
plot(density(residuals(activity.lme)), main="Residuals")
plot(fitted(activity.lme), residuals(activity.lme), xlab="Predicted Activity", ylab="Residuals", main="Residuals vs Predicted")
```
We used a generalized mixed linear model, with non-interacting covariates for the Light cycle and the treatment  A Chi-squared test comparing a model with or without the Genotype term yielded a p-value of `r anova(activity.lme,activity.lme.null)$"Pr(>Chisq)"[2]` for the mice.  This analysis used a generalized mixed linear model (Poission) and only compares HFD to HFD + Drug.
# Session Information
```{r session-info, echo=FALSE, message=FALSE}
sessionInfo()
```
subset(animal.time.course,VO2<100)
subset(animal.time.course,VO2<130)
subset(animal.time.course,VO2<120)
source("http://bioconductor.org/biocLite.R")
biocLite("RTCGA")
source("http://bioconductor.org/biocLite.R")
biocLite("RTCGA")
browseVignettes("RTCGA")
source("https://bioconductor.org/biocLite.R")
biocLite("RTCGA")
source("https://bioconductor.org/biocLite.R")
biocLite("RTCGA")
update.packages(ask=F)
source("https://bioconductor.org/biocLite.R")
biocLite("RTCGA")
source("https://bioconductor.org/biocLite.R")
biocLite("RTCGA", type='source')
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
source("http://bioconductor.org/biocLite.R")
pkgs <- rownames(installed.packages())
biocLite(pkgs, type="source")
source("https://bioconductor.org/biocLite.R")
biocLite("RTCGA")
setwd("~/Documents/Source/RameshRNA-seq/scripts")
liver_interaction_file <- '../data/processed/Liver_Interaction_DESeqResultsProteinCodingOnly.csv'
wat_interaction_file <- '../data/processed/WAT_Interaction_DESeqResultsProteinCodingOnly.csv'
liver_file <- '../data/processed/Liver_DESeqResultsProteinCodingOnly.csv'
wat_file <- '../data/processed/WAT_DESeqResultsProteinCodingOnly.csv'
#exp_filename <- "../data/processed/rpkm_table.csv"
sample_mapping_file <- "../data/raw/sample_mapping.csv"
liver_interxn <- read.csv(liver_interaction_file, row.names="Row.names")
wat_interxn <- read.csv(wat_interaction_file, row.names="Row.names")
liver <- read.csv(liver_file)
wat <- read.csv(wat_file)
head(wat)
library(DESeq2)
head(wat.annot.data)
#required packages
library(biomaRt,quietly=TRUE)
#download gene name annotation data for results sets.
ensembl <- useMart("ensembl",dataset = 'mmusculus_gene_ensembl')
transcriptInfo <- getBM(
attributes=c('ensembl_gene_id','external_gene_name'),
values = 'protein_coding',
filter = 'biotype',
mart=ensembl)
#merge results files with transcript info files.
liver.annot.data <- merge(liver.data, transcriptInfo, by.x=0, by.y="ensembl_gene_id")
rownames(liver.annot.data) <- liver.annot.data[,1]
liver.annot.data[,1] <- NULL
wat.annot.data <- merge(wat.data, transcriptInfo, by.x=0, by.y="ensembl_gene_id")
rownames(wat.annot.data) <- wat.annot.data[,1]
wat.annot.data[,1] <- NULL
setwd("~/Documents/Source/RameshRNA-seq/scripts")
liver_interaction_file <- '../data/processed/Liver_Interaction_DESeqResultsProteinCodingOnly.csv'
wat_interaction_file <- '../data/processed/WAT_Interaction_DESeqResultsProteinCodingOnly.csv'
liver_file <- '../data/processed/Liver_DESeqResultsProteinCodingOnly.csv'
wat_file <- '../data/processed/WAT_DESeqResultsProteinCodingOnly.csv'
#exp_filename <- "../data/processed/rpkm_table.csv"
sample_mapping_file <- "../data/raw/sample_mapping.csv"
liver_interxn <- read.csv(liver_interaction_file, row.names="Row.names")
wat_interxn <- read.csv(wat_interaction_file, row.names="Row.names")
liver <- read.csv(liver_file)
wat <- read.csv(wat_file)
wat.HFGTXvsHFVeh.noNA <- wat_interxn[which(wat_interxn$log2FoldChange.HFGTX_vs_HFVeh != 'NA'),]
head(wat.HFGTXvsHFVeh.noNA)
wat.HFGTXvsHFVeh.noNA <- wat_interxn[which(wat_interxn$log2FoldChange.HFGTX_vs_HFVeh != 'NA')&!(is.na(wat_interxn$pvalue.HFGTX_vs_HFVeh),]
wat.HFGTXvsHFVeh.noNA <- wat_interxn[which(wat_interxn$log2FoldChange.HFGTX_vs_HFVeh != 'NA')&!(is.na(wat_interxn$pvalue.HFGTX_vs_HFVeh)),]
is.na(wat_interxn$pvalue.HFGTX_vs_HFVeh
)
is.na(wat_interxn$pvalue.HFGTX_vs_HFVeh|wat_interxn$log2FoldChange.HFGTX_vs_HFVeh)
table(is.na(wat_interxn$pvalue.HFGTX_vs_HFVeh|wat_interxn$log2FoldChange.HFGTX_vs_HFVeh))
wat.HFGTXvsHFVeh.noNA <- wat_interxn[!(is.na(wat_interxn$pvalue.HFGTX_vs_HFVeh|wat_interxn$log2FoldChange.HFGTX_vs_HFVeh)),]
wat.HFGTXvsHFVeh.noNA <- wat_interxn[!(is.na(wat_interxn$pvalue.HFGTX_vs_HFVeh|wat_interxn$log2FoldChange.HFGTX_vs_HFVeh)),]
wat.HFGTXvsHFVeh.order <- wat.HFGTXvsHFVeh.noNA[order(-wat.HFGTXvsHFVeh.noNA$log2FoldChange.HFGTX_vs_HFVeh),c(20,15)]
#get rid of duplicate gene
wat.HFGTXvsHFVeh.noDup <- wat.HFGTXvsHFVeh.order[!duplicated(wat.HFGTXvsHFVeh.order$external_gene_name),]
wat_interxn
subset(wat_interxn, external_gene_name=='Shc2')
subset(wat_interxn, external_gene_name=='Shc2')
wat.HFGTXvsHFVeh.noNA <- wat_interxn[!(is.na(wat_interxn$pvalue.HFGTX_vs_HFVeh|wat_interxn$log2FoldChange.HFGTX_vs_HFVeh)),]
wat.HFGTXvsHFVeh.order <- wat.HFGTXvsHFVeh.noNA[order(-wat.HFGTXvsHFVeh.noNA$log2FoldChange.HFGTX_vs_HFVeh),c(20,15)]
#get rid of duplicate gene
wat.HFGTXvsHFVeh.noDup <- wat.HFGTXvsHFVeh.order[!duplicated(wat.HFGTXvsHFVeh.order$external_gene_name),]
